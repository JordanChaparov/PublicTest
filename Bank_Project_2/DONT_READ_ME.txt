Класовете които се използват в програмата са разделени на три групи - Account_Classes, Client_Classes и User_Classes.

В Account_Classes суперкласът е BankAccount(Можеше и да е Deposit, но вече е късно). Неговият конструктор изисква:
име на клиент(string), сметка(int за олеснение) и лихва(int). Типът на сметката е зададен като депозит.Направени са
гетъри за всеки параметър. Параметрите са protected, за да могат да се използват от класовете които го наследяват.
Класовете Deposit, Credit и Mortgage наследяват BankAccount, като ползват неговият конструктор, но типът на сметката
се променя във всеки подклас.
примери(инстанциране):
BankAccount("Cecko", 5000, 5)  => създава инстанция на класът със попълнените данни. тип ="deposit"
Deposit("Pecko", 7000, 5)      => създава инстанция на подкласът използвайке конструктора на суперкласът. тип ="deposit"
Credit("Goshko", 6000, 5)      => създава инстанция на подкласът използвайке конструктора на суперкласът. тип ="credit"
Morgage("Asparuh", 5000, 5)    => създава инстанция на подкласът използвайке конструктора на суперкласът. тип ="mortgage"

В Client_Classes суперкласът е Client. Неговият конструктор изисква: име на клиента(str), адрес(str), парола(str),
повтаряне на парола(str) и ЕГН(int). типът на клиента е зададен "firm", достъпа е зададен "User". Направени са
гетъри за всеки параметър.Параметрите са protected, за да могат да се използват от класовете които го наследяват.
Класовете Individual и Firm наследяват Client, като използват неговият конструктор. Също за клас Individual са задедени
нови параметри в неговия конструктор - фамилия(string), имейл(string), телефон(int). За тях също за направени гетъри.
Типа на клиента се променя на "Individual", достъпа остава "User". За клас Firm само се добавя допълнителен параметър за
мениджър(str) и се създава гетър за него. # Трябва и ЕИК но ще ползваме ЕГН все пак са цифри...
примери(инстанциране):
Client("Stavri", "bezdomnik 5", "pass", "pass", 07712226574) => type "firm", access "User"
Individual("inokentii","nqma","3530 grove avenue","pope@abv.bg",0899168531,"amin","amin",4001269978)
=>type"individual", access"User"
Firm("qunatumcore","751  mcwhorter road","julio c johnson","julio","julio",218460977) => type-"Firm", access-"User"

В User_Classes суперкласът е User. Неговият конструктор изисква: име(str), фамилия(str), адрес(str), имейл(str),
телефон(int), парола(str), повтаряне на паролата(str) и ЕГН(int). Достъпа на потребителя е зададен "User", тип на
потребителя е зададен "individual". Направени са гетъри за всеки параметър.Параметрите са protected, за да могат да се
използват от класовете които го наследяват. Класовете Employee и Admin наследяват User, като използват неговият
конструктор. Единственото, което се променя е достъпа на "employee" или "admin" според подкласът.
примери(инстанциране):
User("kondio","djingibi","4507 raver croft drive","doko@abv.bg",0899007733,"doko","doko",5207228283)
достъп-"User, тип-"individual"
Employee("batman","wayne","bat cave 12","batpost@abv.bg",0899070353,"secret","secret",7211064437)
достъп-"Employee", тип-"individual"
Admin("jesus","christ","heaven 5","sonofgod@abv.bg",7777777777,"god","god",-0407203214,)
достъп-"Admin", тип-"individual"

Накратко за библиотеките че времето ни изтича, минута хич не е много.
pandas - използва се за генериране на DataFrame (създаване, сортиране, преброяване на данни... в случая).
csv - използва се за работа с csv файлове (четене, писане, добаване... в случая).
os - в моя скромен случай само при инициализирането на файловете за да проверя дали съшествуват.
matplotlib.pyplot - за аматьорското ми правене на жалки опити за диаграми и графики.
numpy - за генериране на масиви, синуси, косинуси и много готини работи, но в случая не помня закакво точно я използвах.


